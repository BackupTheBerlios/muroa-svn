#include "cstatemachine.h"

#include <QXmlStreamWriter>
#include <QXmlSimpleReader>

#include <QDebug>

CStateMachine::CStateMachine() : m_xml_src(&m_socket), m_xml_reader(0)
{
    connect(&m_socket, SIGNAL(connected()), this, SLOT(connected()));
    connect(&m_socket, SIGNAL(disconnected()), this, SLOT(disconnected()));
    connect(&m_socket, SIGNAL(readyRead()), this, SLOT(readyRead()));
}

CStateMachine::~CStateMachine()
{

}

void CStateMachine::open(QString host, int port)
{
    m_socket.connectToHost(host, port);
    emit connectionStatusChanged(QString("connection established ..."));

}

void CStateMachine::close()
{
    m_xml_writer->writeEndElement();
    m_xml_writer->writeEndDocument();
    if(m_xml_reader)
    {
        delete m_xml_reader;
        m_xml_reader = 0;
    }
    m_socket.disconnectFromHost();

    emit connectionStatusChanged(QString("connection closed."));


}


void CStateMachine::addSong(QString artist, QString album, QString title)
{
    qDebug() << QString("addSong");
    m_xml_writer->writeStartElement("addSong");
    m_xml_writer->writeAttribute("artist", artist.toUtf8());
    m_xml_writer->writeAttribute("album", album.toUtf8());
    m_xml_writer->writeAttribute("title", title.toUtf8());
    m_xml_writer->writeEndElement();
}

void CStateMachine::getCollection()
{
    qDebug() << QString("getCollection");
    m_xml_writer->writeStartElement("getCollection");
    m_xml_writer->writeEndElement();
}


void CStateMachine::connected()
{
    qDebug() << QString("CStateMachine::connected");
    m_xml_reader = new QXmlSimpleReader();
    m_xml_reader->setContentHandler(&m_contentHandler);
    m_xml_writer = new QXmlStreamWriter(&m_socket);
    m_xml_writer->setAutoFormatting(true);
    m_xml_writer->writeStartDocument(QString("1.0"), true);
    m_xml_writer->writeStartElement("muroa_session");

    getCollection();

}

void CStateMachine::disconnected()
{
    qDebug() << QString("CStateMachine::disconnected");
    if(m_xml_reader)
    {
        delete m_xml_reader;
        m_xml_reader = 0;
    }
    if(m_xml_writer)
    {
        delete m_xml_writer;
        m_xml_writer = 0;
    }
}

void CStateMachine::error()
{

}

void CStateMachine::readyRead()
{
    m_xml_reader->parse(&m_xml_src, true);
}

void CStateMachine::test()
{
    getCollection();
}


